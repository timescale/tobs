# Values for configuring the deployment of TimescaleDB
# The charts README is at:
#    https://github.com/timescale/timescaledb-kubernetes/tree/master/charts/timescaledb-single
# Check out the various configuration options (administration guide) at:
#    https://github.com/timescale/timescaledb-kubernetes/blob/master/charts/timescaledb-single/admin-guide.md

# Override the deployment namespace
namespaceOverride: ""

timescaledb-single:
  # disable the chart if an existing TimescaleDB instance is used
  enabled: false
  image:
    tag: pg12-ts2.1-latest
  # create only a ClusterIP service
  loadBalancer:
    enabled: false
  # number or TimescaleDB pods to spawn (default is 3, 1 for no HA)
  replicaCount: 1
  # backup is disabled by default, enable it
  # if you want to backup timescaleDB to s3
  backup:
    enabled: false

# Values for configuring the deployment of the Promscale Connector
# The charts README is at:
#   https://github.com/timescale/promscale/tree/master/helm-chart
promscale:
  enabled: false
  image: timescale/promscale:latest
  # connection options
  connection:
    # the db name in which the metrics will be stored
    dbName: &metricDB postgres
    # user to connect to TimescaleDB with
    user: postgres
    password: ""
    host: &dbHost "{{ .Release.Name }}.{{ .Release.Namespace }}.svc.cluster.local"

# Enabling Kube-Prometheus will install
# Grafana & Prometheus into tobs as they
# are part of Kube-Prometheus already
kube-prometheus-stack:
  enabled: true
  prometheus:
    prometheusSpec:
      scrapeInterval: "1m"
      scrapeTimeout: "10s"
      evaluationInterval: "1m"
      ## The remote_read spec configuration for Prometheus.
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#remotereadspec
      remoteRead:
        # - {protocol}://{host}:{port}/{endpoint}
        - url: "http://{{ .Release.Name }}-promscale-connector.{{ .Release.Namespace }}.svc.cluster.local:9201/read"
          readRecent: true

      ## The remote_write spec configuration for Prometheus.
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#remotewritespec
      remoteWrite:
        - url: "http://{{ .Release.Name }}-promscale-connector.{{ .Release.Namespace }}.svc.cluster.local:9201/write"

      ## Prometheus pod storage spec
      storageSpec:
        ## Using PersistentVolumeClaim
        disableMountSubPath: true
        volumeClaimTemplate:
          spec:
            accessModes:
              - "ReadWriteOnce"
            resources:
              requests:
                storage: 8Gi

  # Values for configuring the deployment of Grafana
  # The Grafana Community chart is used and the guide for it
  # can be found at:
  #   https://github.com/grafana/helm-charts/blob/main/charts/grafana/README.md
  grafana:
    enabled: false
    sidecar:
      datasources:
        enabled: true
        label: tobs_datasource
        labelValue: "true"
        defaultDatasourceEnabled: false
      dashboards:
        enabled: true
        files:
          - dashboards/k8s-cluster.json
          - dashboards/k8s-hardware.json
    adminPassword: ""
    envFromSecret: "{{ .Release.Name }}-grafana-db"
    prometheus:
      datasource:
        enabled: true
        # By default url of data source is set to ts-prom connector instance
        # deployed with this chart. If a connector isn't used this should be
        # set to the prometheus-server.
        url: "http://{{ .Release.Name }}-promscale-connector.{{ .Release.Namespace }}.svc.cluster.local:9201"
    timescale:
      database:
        enabled: true
        host: *dbHost
        port: 5432
        user: grafanadb
        pass: grafanadb
        dbName: *metricDB
        schema: grafanadb
        sslMode: require
      datasource:
        enabled: true
        user: grafana
        pass: grafana
        dbName: *metricDB
        sslMode: require
        # By default the url/host is set to the db instance deployed
        # with this chart
        host: *dbHost
        port: 5432
      adminUser: postgres
      adminPassSecret: "{{ .Release.Name }}-promscale"

grafanaDBJob:
  resources: {}

# Enable OpenTelemetry Operator
# If using tobs CLI you can enable otel with --enable-opentelemetry flag
opentelemetryOperator:
  enabled: false